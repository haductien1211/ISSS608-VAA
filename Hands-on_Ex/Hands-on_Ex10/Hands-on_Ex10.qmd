---
title: "Hands-on Exercise 10 Information Dashboard Design: R methods"
author: "Ha Duc Tien"
date: "June 14, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. Overview

By the end of this hands-on exercise, you will be able to:

create bullet chart by using ggplot2, create sparklines by using ggplot2 , build industry standard dashboard by using R Shiny.

# 2. Getting started

For the purpose of this hands-on exercise, the following R packages will be used.

```{r}
pacman::p_load(lubridate, ggthemes, reactable,
               reactablefmtr, gt, gtExtras, tidyverse)
```

-   [tidyverse](https://www.tidyverse.org/) provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.
-   [lubridate](https://lubridate.tidyverse.org/) provides functions to work with dates and times more efficiently.
-   [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.
-   [gtExtras](https://jthomasmock.github.io/gtExtras/) provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.
-   [reactable](https://glin.github.io/reactable/) provides functions to create interactive data tables for R, based on the React Table library and made with reactR.
-   [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.

# 3. Importing Microsoft Access database

## 3.1 The data set

For the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.

## 3.2 Importing database into R

In the code chunk below, `odbcConnectAccess()` of [RODBC](https://cran.r-project.org/web/packages/RODBC/) package is used used to import a database query table into R.

```{r}
pacman::p_load(RODBC)

con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
coffeechain <- sqlFetch(con, 'CoffeeChain Query')

write_rds(coffeechain, "data/CoffeeChain.rds")
odbcClose(con)
```

Note: Before running the code chunk, you need to change the R system to 32bit version. This is because the `odbcConnectAccess()` is based on 32bit and not 64bit

## 3.3 Data Preparation

The code chunk below is used to import CoffeeChain.rds into R.

```{r}
coffeechain <- read_rds("data/rds/CoffeeChain.rds")
```
