---
title: "Hands-on Exercise 10 Information Dashboard Design: R methods"
author: "Ha Duc Tien"
date: "June 14, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
  code-fold: true
---

# 1. Overview

By the end of this hands-on exercise, we will be able to:

create bullet chart by using ggplot2, create sparklines by using ggplot2 , build industry standard dashboard by using R Shiny.

# 2. Getting started

For the purpose of this hands-on exercise, the following R packages will be used.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

pacman::p_load(lubridate, ggthemes, reactable,
               reactablefmtr, gt, gtExtras, tidyverse, svglite)
```

-   [tidyverse](https://www.tidyverse.org/) provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.
-   [lubridate](https://lubridate.tidyverse.org/) provides functions to work with dates and times more efficiently.
-   [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.
-   [gtExtras](https://jthomasmock.github.io/gtExtras/) provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.
-   [reactable](https://glin.github.io/reactable/) provides functions to create interactive data tables for R, based on the React Table library and made with reactR.
-   [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.

# 3. Importing Microsoft Access database

## 3.1 The data set

For the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.

## 3.2 Importing database into R

In the code chunk below, `odbcConnectAccess()` of [RODBC](https://cran.r-project.org/web/packages/RODBC/) package is used used to import a database query table into R.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

pacman::p_load(RODBC)

con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
coffeechain <- sqlFetch(con, 'CoffeeChain Query')

write_rds(coffeechain, "data/CoffeeChain.rds")
odbcClose(con)
```

Note: Before running the code chunk, we need to change the R system to 32bit version. This is because the `odbcConnectAccess()` is based on 32bit and not 64bit

## 3.3 Data Preparation

The code chunk below is used to import CoffeeChain.rds into R.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

coffeechain <- read_rds("data/rds/CoffeeChain.rds")
```

Note: This step is optional if coffeechain is already available in R.

The code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.

```{r}
#| code-fold: true
#| code-summary: "Show the code"


product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
```

## 3.4 Bullet chart in ggplot2

The code chunk below is used to plot the bullet charts using ggplot2 functions.

```{r}
#| code-fold: true
#| code-summary: "Show the code"


ggplot(product, aes(Product, current)) +
  geom_col(aes(Product, max(target) * 1.01),
           fill="grey85", width=0.85) +
  geom_col(aes(Product, target * 0.75),
           fill="grey60", width=0.85) +
  geom_col(aes(Product, target * 0.5),
           fill="grey50", width=0.85) +
  geom_col(aes(Product, current), 
           width=0.35,
           fill = "black") + 
  geom_errorbar(aes(y = target,
                    x = Product, 
                    ymin = target,
                    ymax= target),
                width = .4,
                colour = "red",
                size = 1) +
  coord_flip()
```

# 4. Plotting sparklines using ggplot2

In this section, we will learn how to plot sparklines by using ggplot2.

## 4.1 Preparing the data

```{r}
#| code-fold: true
#| code-summary: "Show the code"


sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)
```

The code chunk below is used to compute the minimum, maximum and end othe the month sales.

```{r}
#| code-fold: true
#| code-summary: "Show the code"


mins <- group_by(sales_report, Product) %>% 
  slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>% 
  slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>% 
  filter(Month == max(Month))
```

The code chunk below is used to compute the 25 and 75 quantiles.

```{r}
quarts <- sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales, 
                              0.25),
            quart2 = quantile(Sales, 
                              0.75)) %>%
  right_join(sales_report)
```

## 4.2 sparklines in ggplot2

```{r}
#| code-fold: true
#| code-summary: "Show the code"


ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'red') +
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())
```

# 5. Static Information Dashboard Design: gt and gtExtras methods

In this section, we will learn how to create static information dashboard by using [gt](https://gt.rstudio.com/) and [gtExtras](https://jthomasmock.github.io/gtExtras/) packages.

## Plotting a simple bullet chart

In this section, we will learn how to prepare a bullet chart report by using functions of gt and gtExtras packages.

```{r}
#| code-fold: true
#| code-summary: "Show the code"


product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current, 
              target = target, 
              width = 60,
              palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

# 6. sparklines: gtExtras method

Before we can prepare the sales report by product by using gtExtras functions, code chunk below will be used to prepare the data.

```{r}
#| code-fold: true
#| code-summary: "Show the code"


report <- coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate (Month = month(Date, 
                        label = TRUE, 
                        abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()
```

It is important to note that one of the requirement of gtExtras functions is that almost exclusively they require you to pass data.frame with list columns. In view of this, code chunk below will be used to convert the report data.frame into list columns.

```{r}
#| code-fold: true
#| code-summary: "Show the code"


report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

## 6.1 Plotting Coffechain Sales report

```{r}
#| code-fold: true
#| code-summary: "Show the code"


report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop") %>%
   gt() %>%
   gt_plt_sparkline('Monthly Sales',
                    same_limit = FALSE)
```

## 6.2 Adding statistics

First, calculate summary statistics by using the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"


report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            ) %>%
  gt() %>%
  fmt_number(columns = 4,
    decimals = 2)
```

## 6.3 Combining the data.frame

Next, use the code chunk below to add the statistics on the table.

```{r}
#| code-fold: true
#| code-summary: "Show the code"


spark <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"


sales <- report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            )
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"


sales_data = left_join(sales, spark)
```

## 6.4 Plotting the updated data.table

```{r}
#| code-fold: true
#| code-summary: "Show the code"


sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales',
                   same_limit = FALSE)
```

## 6.5 Combining bullet chart and sparklines

```{r}
#| code-fold: true
#| code-summary: "Show the code"


bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"


sales_data = sales_data %>%
  left_join(bullet)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"


sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual, 
                target = Target, 
                width = 28,
                palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

# 7. Interactive Information Dashboard Design: reactable and reactablefmtr methods

In this section, we will learn how to create interactive information dashboard by using [reactable](https://glin.github.io/reactable/) and [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) packages. 

In order to build an interactive sparklines, we need to install dataui R package by using the code chunk below.

```{r}
#| eval: false
remotes::install_github("timelyportfolio/dataui")
```

Next, we need to load the package onto R environment by using the code chunk below.

```{r}
library(dataui)
```

## 7.1 Plotting interactive sparklines

Similar to gtExtras, to plot an interactive sparklines by using reactablefmtr package we need to prepare the list field by using the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

report <- report %>%
  group_by(Product) %>%
  summarize(`Monthly Sales` = list(Sales))
```

Next, [`react_sparkline`](https://kcuilla.github.io/reactablefmtr/reference/react_sparkline.html) will be to plot the sparklines as shown below.


```{r}
#| code-fold: true
#| code-summary: "Show the code"

reactable(
  report,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

## 7.2 Changing the pagesize

By default the pagesize is 10. In the code chunk below, arguments defaultPageSize is used to change the default setting.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

## 7.3 Adding points and labels

In the code chunk below highlight_points argument is used to show the minimum and maximum values points and label argument is used to label first and last values.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        labels = c("first", "last")
        )
    )
  )
)
```

## 7.4 Adding reference line

In the code chunk below statline argument is used to show the mean line.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        statline = "mean"
        )
    )
  )
)
```

## 7.5 Adding bandline

Instead adding reference line, bandline can be added by using the `bandline` argument.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        line_width = 1,
        bandline = "innerquartiles",
        bandline_color = "green"
        )
    )
  )
)
```

## 7.6 Changing from sparkline to sparkbar

Instead of displaying the values as sparklines, we can display them as sparkbars as shiwn below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)
```