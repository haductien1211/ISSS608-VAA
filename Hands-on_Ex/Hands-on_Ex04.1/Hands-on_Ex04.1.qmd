---
title: "Hands-on Exercise 4.1 Visual Statistical Analysis"
author: "Ha Duc Tien"
date: "May 02, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. ggstatsplot

## 1.0 Getting Started

In this hands-on exercise, we will gain hands-on experience on using:

-   ggstatsplot package to create visual graphics with rich statistical information,

-   performance package to visualise model diagnostics, and

-   parameters package to visualise model parameters

[ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.

### 1.0.1 Install and launching R packages

The Code chunk below uses p_load() function of pacman package to check if tidyverse and ggstatsplot packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(ggstatsplot, tidyverse) 
```

### 1.0.2 Importing the data

```{r}
exam <- read_csv("data/Exam_data.csv")
head(exam)
```

## 1.1. One-sample test: gghistostats() method

In the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.

```{r}
set.seed(1234)

gghistostats(data = exam, x = ENGLISH, type = "bayes", 
             test.value = 60, xlab = "English scores")
```

## 1.2 Two-sample mean test: ggbetweenstats()

In the code chunk below, [ggbetweenstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.

```{r}
ggbetweenstats(data = exam, x = GENDER, y = MATHS, 
               type = "np", messages = FALSE)
```

## 1.3 Oneway ANOVA Test: ggbetweenstats() method

In the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race

```{r}
ggbetweenstats(data = exam, x = RACE, y = ENGLISH, type = "parametric",
               mean.ci = TRUE, pairwise.comparisons = TRUE,
               pairwise.display = "s", p.adjust.method = "fdr",
               message = FALSE)
```

## 1.4. Significant Test of Correlation: ggscatterstats()

In the code chunk below, [ggscatterstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(data = exam, x = MATHS, y = ENGLISH, marginal = FALSE)
```

## 1.5. Significant Test of Association (Depedence) : ggbarstats() methods

In the code chunk below, the Maths scores is binned into a 4-class variable by using cut().

```{r}
exam1 <- exam %>%
          mutate(MATHS_bins = cut(MATHS, breaks = c(0,60,75,85,100)))

```

In this code chunk below [ggbarstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association

```{r}
ggbarstats(data = exam1, x = MATHS_bins, y = GENDER)
```

# 2. Visualising Models

In this section, we will work on how to visualise model diagnostic and model parameters by using parameters package.

Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

## 2.0 Getting Stated

### 2.0.1 Installing and launching R packages

The Code chunk below uses p_load() function of pacman package to load the needed libaries.

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

### 2.0.2 Importing Excel file using readxl methods

In the code chunk below, [read_xls()](https://readxl.tidyverse.org/reference/read_excel.html) of [readxl](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R.

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls","data")
car_resale
```

The output object `car_resale` is a tibble data frame

## 2.1 Multiple Regression model using lm()

The code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.

```{r}
model <- lm(formula = Price ~ Age_08_04 + Mfg_Year + KM 
            + Weight + Guarantee_Period, data = car_resale)

model
```

## 2.2 Model Diagnostic: checking for multicolinearity:

In the code chunk, [check_collinearity()](https://easystats.github.io/performance/reference/check_collinearity.html) of [performance](https://easystats.github.io/performance/) package.

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

## 2.3 Model Diagnostic: checking normality assumption

In the code chunk, [check_normality()](https://easystats.github.io/performance/reference/check_normality.html) of [performance](https://easystats.github.io/performance/) package

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period, 
             data = car_resale)

check_n <- check_normality(model1)

plot(check_n)
```

## 2.4 Model Diagnostic: Check model for homogeneity of variances

In the code chunk, [check_heteroscedasticity()](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of performance package.

```{r}
check_h <- check_heteroscedasticity(model1)
plot(check_h)
```

## 2.5 Model Diagnostic: Complete check

```{r}
check_model(model1)
```

## 2.6 Visualising Regression Parameters: see methods

In the code chunk below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.

```{r}
plot(parameters(model1))
```

## 2.7 Visualising Regression Parameters: ggcoefstats() methods

In the code chunk below, [ggcoefstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.

```{r}
ggcoefstats(model1, output = "plot")
```
