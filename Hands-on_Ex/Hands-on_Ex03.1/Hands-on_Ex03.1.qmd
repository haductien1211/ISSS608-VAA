---
title: "Hands-on Exercise 3.1"
author: "Ha Duc Tien"
date: "April 25, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. Getting Started

In this hands-on exercise, I will be exploring interactive data visualisation by using functions provided by ggiraph and plotlyr packages

## 1.1 Install and launching R packages

The Code chunk below uses p_load() function of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse, ggiraph, patchwork, DT, plotly)
```

## 1.2 Importing the data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# 2. Interactive Data Visualisation - ggiraph methods

## 2.1 Tooltip effect with tooltip aesthetic

### The Code
```{r}
#| eval: false
p1 <- ggplot(data=exam_data, aes(x = MATHS)) +
      geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE, 
                               binwidth = 1, method = "histodot") +
      scale_y_continuous(NULL,  breaks = NULL)

girafe(ggobj = p1, width_svg = 6,height_svg = 6*0.618)

```


Two steps are involved, first, an interactive version of ggplot2 geom ([geom_dotplot_interactive()](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html)) will be used to create the basic graph. Then, [girafe()](https://davidgohel.github.io/ggiraph/reference/girafe.html) will be used to generate an svg object to be displayed on an html page.

###Interactivity

By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.


```{r}
#| echo: false
p1 <- ggplot(data=exam_data, aes(x = MATHS)) +
      geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE, 
                               binwidth = 1, method = "histodot") +
      scale_y_continuous(NULL,  breaks = NULL)

girafe(ggobj = p1, width_svg = 6,height_svg = 6*0.618)
```

## 2.2 Displaying multiple information on tooltip

The content of the tooltip can be customised by including a list object as shown in the code chunk below.

### The Code

```{r}
#| eval: false

exam_data$tooltip <- c(paste0( "Name = ", exam_data$ID, 
                               "\n Class = ", exam_data$CLASS)) 

p2 <- ggplot(data=exam_data, aes(x = ENGLISH)) +
      geom_dotplot_interactive(aes(tooltip = exam_data$tooltip), stackgroups = TRUE, 
                               binwidth = 1, method = "histodot") +
      scale_y_continuous(NULL,  breaks = NULL)

girafe(ggobj = p2, width_svg = 8,height_svg = 8*0.618)
```

###Interactivity

By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.

```{r}
#| echo: false
exam_data$tooltip <- c(paste0( "Name = ", exam_data$ID, 
                               "\n Class = ", exam_data$CLASS)) 

p2 <- ggplot(data=exam_data, aes(x = ENGLISH)) +
      geom_dotplot_interactive(aes(tooltip = exam_data$tooltip), stackgroups = TRUE, 
                               binwidth = 1, method = "histodot") +
      scale_y_continuous(NULL,  breaks = NULL)

girafe(ggobj = p2, width_svg = 8,height_svg = 8*0.618)
```

## 2.3 Customising Tooltip style

Code chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations

### The Code

```{r}
#| eval: false

tooltip_css <- "background-color:white; font-style:bold; color:black;"

p3 <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE,
                           binwidth = 1, method = "histodot") +               
  scale_y_continuous(NULL,breaks = NULL)

girafe(ggobj = p3, width_svg = 6, height_svg = 6*0.618, 
       options = list(opts_tooltip(css = tooltip_css)))
```

### Interactivity

```{r}
#| echo: false
tooltip_css <- "background-color:white; font-style:bold; color:black;"

p3 <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE,
                           binwidth = 1, method = "histodot") +               
  scale_y_continuous(NULL,breaks = NULL)

girafe(ggobj = p3, width_svg = 6, height_svg = 6*0.618, 
       options = list(opts_tooltip(css = tooltip_css)))
```

