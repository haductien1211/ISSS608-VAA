{
  "hash": "43fc75a62c4a46cb106c1d23413a11ab",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 4.1 Visual Statistical Analysis\"\nauthor: \"Ha Duc Tien\"\ndate: \"May 02, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# 1. ggstatsplot\n\n## 1.0 Getting Started\n\nIn this hands-on exercise, we will gain hands-on experience on using:\n\n-   ggstatsplot package to create visual graphics with rich statistical information,\n\n-   performance package to visualise model diagnostics, and\n\n-   parameters package to visualise model parameters\n\n[ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\n### 1.0.1 Install and launching R packages\n\nThe Code chunk below uses p_load() function of pacman package to check if tidyverse and ggstatsplot packages are installed in the computer. If they are, then they will be launched into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse) \n```\n:::\n\n\n### 1.0.2 Importing the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\nhead(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n```\n:::\n:::\n\n\n## 1.1. One-sample test: gghistostats() method\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngghistostats(data = exam, x = ENGLISH, type = \"bayes\", \n             test.value = 60, xlab = \"English scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## 1.2 Two-sample mean test: ggbetweenstats()\n\nIn the code chunk below, [ggbetweenstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(data = exam, x = GENDER, y = MATHS, \n               type = \"np\", messages = FALSE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## 1.3 Oneway ANOVA Test: ggbetweenstats() method\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(data = exam, x = RACE, y = ENGLISH, type = \"parametric\",\n               mean.ci = TRUE, pairwise.comparisons = TRUE,\n               pairwise.display = \"s\", p.adjust.method = \"fdr\",\n               message = FALSE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## 1.4. Significant Test of Correlation: ggscatterstats()\n\nIn the code chunk below, [ggscatterstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(data = exam, x = MATHS, y = ENGLISH, marginal = FALSE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 1.5. Significant Test of Association (Depedence) : ggbarstats() methods\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam1 <- exam %>%\n          mutate(MATHS_bins = cut(MATHS, breaks = c(0,60,75,85,100)))\n```\n:::\n\n\nIn this code chunk below [ggbarstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbarstats(data = exam1, x = MATHS_bins, y = GENDER)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n# 2. Visualising Models\n\nIn this section, we will work on how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n## 2.0 Getting Stated\n\n### 2.0.1 Installing and launching R packages\n\nThe Code chunk below uses p_load() function of pacman package to load the needed libaries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, performance, parameters, see)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npackage 'modelbased' successfully unpacked and MD5 sums checked\npackage 'see' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\tien_\\AppData\\Local\\Temp\\RtmpKKeTxk\\downloaded_packages\n```\n:::\n:::\n\n\n### 2.0.2 Importing Excel file using readxl methods\n\nIn the code chunk below, [read_xls()](https://readxl.tidyverse.org/reference/read_excel.html) of [readxl](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\",\"data\")\ncar_resale\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n```\n:::\n:::\n\n\nThe output object `car_resale` is a tibble data frame\n\n## 2.1 Multiple Regression model using lm()\n\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(formula = Price ~ Age_08_04 + Mfg_Year + KM \n            + Weight + Guarantee_Period, data = car_resale)\n\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n```\n:::\n:::\n\n\n## 2.2 Model Diagnostic: checking for multicolinearity:\n\nIn the code chunk, [check_collinearity()](https://easystats.github.io/performance/reference/check_collinearity.html) of [performance](https://easystats.github.io/performance/) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_collinearity(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_c <- check_collinearity(model)\nplot(check_c)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## 2.3 Model Diagnostic: checking normality assumption\n\nIn the code chunk, [check_normality()](https://easystats.github.io/performance/reference/check_normality.html) of [performance](https://easystats.github.io/performance/) package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n             data = car_resale)\n\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## 2.4 Model Diagnostic: Check model for homogeneity of variances\n\nIn the code chunk, [check_heteroscedasticity()](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of performance package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_h <- check_heteroscedasticity(model1)\nplot(check_h)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## 2.5 Model Diagnostic: Complete check\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(model1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## 2.6 Visualising Regression Parameters: see methods\n\nIn the code chunk below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(parameters(model1))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## 2.7 Visualising Regression Parameters: ggcoefstats() methods\n\nIn the code chunk below, [ggcoefstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoefstats(model1, output = \"plot\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex04.1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}