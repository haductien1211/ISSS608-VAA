{
  "hash": "b3d84c77fe43f8846ea18e7cb576ac8b",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 10 Information Dashboard Design: R methods\"\nauthor: \"Ha Duc Tien\"\ndate: \"June 14, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# 1. Overview\n\nBy the end of this hands-on exercise, you will be able to:\n\ncreate bullet chart by using ggplot2, create sparklines by using ggplot2 , build industry standard dashboard by using R Shiny.\n\n# 2. Getting started\n\nFor the purpose of this hands-on exercise, the following R packages will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(lubridate, ggthemes, reactable,\n               reactablefmtr, gt, gtExtras, tidyverse)\n```\n:::\n\n\n-   [tidyverse](https://www.tidyverse.org/) provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.\n-   [lubridate](https://lubridate.tidyverse.org/) provides functions to work with dates and times more efficiently.\n-   [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.\n-   [gtExtras](https://jthomasmock.github.io/gtExtras/) provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.\n-   [reactable](https://glin.github.io/reactable/) provides functions to create interactive data tables for R, based on the React Table library and made with reactR.\n-   [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.\n\n# 3. Importing Microsoft Access database\n\n## 3.1 The data set\n\nFor the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.\n\n## 3.2 Importing database into R\n\nIn the code chunk below, `odbcConnectAccess()` of [RODBC](https://cran.r-project.org/web/packages/RODBC/) package is used used to import a database query table into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(RODBC)\n\ncon <- odbcConnectAccess2007('data/Coffee Chain.mdb')\ncoffeechain <- sqlFetch(con, 'CoffeeChain Query')\n\nwrite_rds(coffeechain, \"data/CoffeeChain.rds\")\nodbcClose(con)\n```\n:::\n\n\nNote: Before running the code chunk, you need to change the R system to 32bit version. This is because the `odbcConnectAccess()` is based on 32bit and not 64bit\n\n## 3.3 Data Preparation\n\nThe code chunk below is used to import CoffeeChain.rds into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffeechain <- read_rds(\"data/rds/CoffeeChain.rds\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}